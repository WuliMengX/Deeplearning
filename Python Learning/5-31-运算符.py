"""算术运算符"""
"""
    1.+  加
    2.-  减
    3.*  乘
    4./  除
    5.%  取模
    6.** 幂
    7.// 整除 相当于/再向下取整 注意负数取整 取模
"""

"""比较运算符"""
"""
    返回布尔值:True False
    1.==
    2.!=
    3.>
    4.<
    5.>=
    6.<=
"""

"""赋值运算符"""
"""
    1.=
    2.+=   # a+=3 基本可以理解为 a=a+3 变量也可以是其他数据类型
    3.-=
    4.*=
    5./=
    6.%=
    7.**=
    8.//=
    9.:/        海象赋值运算符 

    海象赋值运算符:可在表达式内部为变量赋值,记得加括号
    #写法一:
    string = "hello world"
    length = len(string)
    print(length + 5)
    print(f"string的长度为{length}")

    #写法二
    string = "hello world"
    print(len(string) + 5)
    print(f"string的长度为{len(string)}")

    #写法三
    string = "hello world"
    print( ( length := len(string) ) + 5)
    print(f"string的长度为{length}")
    相对写法一 避免了一次赋值给中间变量的步骤
    相对写法二 避免使用两次len()函数

    增强赋值:在操作数是一个可变类型对象时会以追加的方式进行处理,普通赋值则以新建的方式处理,此时增强赋值效率更高
    包括:+= -= *= /= %= **= //=

    序列赋值:
    a,b = 3,4 等同于(a,b) = (3,4)
    (a,b) = (3,4)
    [a,b] = [3,4]
    a,b,c = [3,4,5]
    a,b,c = "你好吗"

    多目标赋值:多个变量都指向同一个数据地址
    a = b = c = 999
    
    逻辑运算符:
    and 与 左边为假返回左边,否则返回右边
    or  或 左边为真返回左边,否则返回右边
    not 非 假,返回True;真,返回False
"""