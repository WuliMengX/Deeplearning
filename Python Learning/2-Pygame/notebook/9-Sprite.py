"""Pygame.sprite"""
"""
    精灵（英文译为 Sprite），其实在一个游戏程序中，精灵本质指的是一张张小尺寸的图片，比如游戏中的各种道具、人物、场景装饰等，它们都可以看做成一张张小的“精灵”图。
    除此之外，人物的移动也可以看做是一系列小精灵图构成的序列（按帧组成的序列）
    如果将逐帧分解后的动作，按照一定的频率播放，那么就形成了动画精灵
    精灵有个特点就是允许精灵之间进行交互，也称之为碰撞，而碰撞检测，指的就是检测两个精灵之间是否发生了碰撞
    
    Pygame 专门提供了一个处理精灵的模块，也就是 sprite（pygame.sprite）模块
    通常情况下，我们使用该模块的基类 Sprite 来创建一个子类，从而达到处理精灵的目的
    该子类提供了操作精灵的常用属性和方法，如下所示：
        self.image	    加载要显示的精灵图片，控制图片大小和填充色
        self.rect	    精灵图片显示在哪个位置
        Sprite.update()	刷新精灵图，使其相应效果生效
        Sprite.add()	添加精灵图到精灵组中（groups）
        Sprite.remove()	从精灵组中删除选中的精灵图
        Sprite.kill()	删除精灵组中全部的精灵
        Sprite.alive()	判断某个精灵是否属于精灵组
    
    注意，当游戏中有大量的精灵时，操作它们将变得复杂，此时通过构建精灵容器（group 类）也就是精灵组来统一管理这些精灵。
    构建方法如下：
        # 创建精灵组
        group = pygame.sprite.Group()
        # 向组内添加一个精灵
        group.add(sprite_one)
        
    精灵碰撞检测方法：
        pygame.sprite.collide_rect() 	    两个精灵之间的矩形检测，即矩形区域是否有交汇，返回一个布尔值。
        pygame.sprite.collide_circle()	    两个精灵之间的圆形检测，即圆形区域是否有交汇，返回一个布尔值。
        pygame.sprite.collide_mask() 	    两个精灵之间的像素蒙版检测，更为精准的一种检测方式。
        pygame.sprite.spritecollide() 	    精灵和精灵组之间的矩形碰撞检测，一个组内的所有精灵会逐一地对另外一个单个精灵进行碰撞检测，返回值是一个列表，包含了发生碰撞的所有精灵。
        pygame.sprite.spritecollideany()	精灵和精灵组之间的矩形碰撞检测，上述函数的变体，当发生碰撞时，返回组内的一个精灵，无碰撞发生时，返回 None。
        pygame.sprite.groupcollide()	    检测在两个组之间发生碰撞的所有精灵，它返回值是一个字典，将第一组中发生碰撞的精灵作为键，第二个组中发生碰撞的精灵作为值。    
        
        
        
"""