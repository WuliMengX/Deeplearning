"""命名空间"""
"""
    定义：命名空间是一个从名称到对象的映射
    实现：大部分命名空间当前由python字典决定（内置命名空间builtins模块实现）
    作用：提供了在项目中避免名字冲突的一种方法
        （各个命名空间是独立的，没有任何关系，所以一个命名空间中不能有重名，但不同的命名空间是可以重名而没有任何影响的） 
         
    1.内置命名空间
        包含所有 Python 内置对象的名称
        在解释器启动时创建，持续到解释器终止：
            import builtins
            print(dir(builtins))
        
        dir([object])   
                1.不带参数时，返回当前范围内的变量、方法和定义的类型列表
                2.带参数时，返回参数的属性、方法列表
                3.如果参数包含方法__dir__()，该方法将被调用
                4.如果参数不包含__dir__()，该方法将最大限度地收集参数信息
                5.返回的列表按字母表排序（按照 ASCII 码）

    2.全局命名空间
        包含模块中定义的名称，记录了模块的变量、函数、类、其它导入的模块等
        在模块被读入时创建，持续到解释器退出
        
    3.局部命名空间
        包含函数中定义的名称，记录了函数的变量、参数等
        一个函数的局部命名空间在这个函数被调用时创建，持续到函数结束
    
    4.命名空间查找顺序：局部->全局->内置 
    
"""

"""作用域"""
""" 
    定义：Python 程序可以直接访问命名空间的正文区域
    作用：决定了哪一部分区域可以访问哪个特定的名称
    分类：（L - E - G - B 作用域依次增大）
            1.局部作用域（Local） - L
            2.闭包函数外的函数中（Enclosing） - E
            3.全局作用域（Global） - G
            4.內建作用域（Built-in） - B
            
    规则：在当前的作用域如果找不到对应名称，则去更大一级的作用域去找，直到最后找不到就会报错
    说明：只有模块（module）、类（class）以及函数（def、lambda）才会引入新的作用域

    局部作用域          #全局变量不能调用局部变量
    
    闭包函数外的函数中   #Enclosing可以调用全局变量 局部作用域可以调用Enclosing变量
    
    全局作用域          #局部可以调用全局 
    
    内建作用域          #内置函数和数据类型定义 都内置在内建作用域builtins模块中
    
    global和nonlocal 
        当内部作用域想要给外部作用域的变量重新赋值时，可以用 global或 nonlocal 关键字声明
        global声明全局变量 
        nonlocal声明Enclosing变量
    
"""
